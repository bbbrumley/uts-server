# -*- coding: utf-8 -*-
#
# SST (selenium-simple-test) documentation build configuration file, created by
# sphinx-quickstart on Mon May 16 14:23:09 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
import os
import sys
import re

sys.path.insert(0, os.path.abspath('..'))

def get_version():
    cmake = os.path.join(os.path.dirname(__file__),'../CMakeLists.txt')
    with open(cmake) as f:
        for line in f.readlines():
            m = re.search('set\(VERSION ([\.0-9]+)\)', line)
            if m:
                return m.group(1)

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.viewcode']

# Add any paths that contain templates here, relative to this directory.
#templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'uts-server - RFC 3161 Timestamp Server'
copyright = u'2016, Pierre-Francois Carpentier'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
# The full version, including alpha/beta/rc tags.
release = get_version()

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
#exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'nature'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = 'Uts-Server %s Docs' % release

# A shorter title for the navigation bar.  Default is the same as html_title.

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = './_static/logo.svg'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = './_static/favicon.png'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['assets']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
html_use_index = False

# If true, the index is split into individual pages for each letter.
html_split_index = False

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = False

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# If true, an Opendescription file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
html_file_suffix = ".html"

# Output file base name for HTML help builder.
htmlhelp_basename = 'uts-server-docs'

# Generate the configure.rst file from the default configuration file
def gen_param_table(out_file='./configure.rst'):
    tsq_path = os.path.join(os.path.dirname(__file__),'../conf/uts-server.cnf')

    head = """
Configuration Parameters
========================
\n
"""

    foot = """
Full Configuration File
=======================

.. literalinclude:: ../conf/uts-server.cnf
    :language: ini
\n
"""

    docs = {}

    text_buf = ""
    cur_section = ""

    out_file = open(out_file, "w")


    with open(tsq_path) as f:
        for line in f.readlines():
            m = re.search('\[ (\w+) \]', line)
            if m:
                section = m.group(1)
                docs[section] = {'text': text_buf, 'vars': {}}
                cur_section = section
                text_buf = ""

            m = re.search('^#[\s](.*)', line)
            if m:
                text = m.group(1)
                if text_buf:
                    text_buf += '\n'
                text_buf += text

            m = re.search('^#?([^\s]*)\s*=\s*(.*)', line)
            if m:
                var = m.group(1)
                ex_val = m.group(2)
                docs[cur_section]['vars'][var] = {'desc': text_buf, 'val': ex_val}
                text_buf = ""

    max_var = 0
    max_desc = 0
    max_val = 0
    max_section = 0

    for section in docs:
        max_section = max(len(docs[section]['text']), max_section)
        for var in docs[section]['vars']:
            if docs[section]['vars'][var]:
                max_var = max(len(var), max_var)
                for line in docs[section]['vars'][var]['desc'].split('\n'):
                    max_desc = max(len(line), max_desc)
                max_val = max(len(docs[section]['vars'][var]['val']), max_val)

    def print_line(var, desc, val):
        out_file.write(\
             '| ' + var + ' ' * (max_var - len(var)) + \
            ' | ' + desc + ' ' * (max_desc - len(desc)) + \
            ' | ' + val + ' ' * (max_val - len(val)) + \
            ' |\n')


    out_file.write(head)

    for section in sorted(docs):
        out_file.write('Section [ ' + section + ' ]\n')
        out_file.write('-' * len('Section [ ' + section + ' ]') + '\n')
        out_file.write('\n')
        out_file.write(docs[section]['text'] + '\n')
        out_file.write('\n')
        out_file.write('+-' + '-' * max_var + '-+-' + '-' * max_desc + '-+-' + '-' * max_val + '-+\n')
        print_line('Parameter', 'Description', 'Example Value')
        out_file.write('+=' + '=' * max_var + '=+=' + '=' * max_desc + '=+=' + '=' * max_val + '=+\n')
        for var in sorted(docs[section]['vars']):
            if docs[section]['vars'][var]:
                first = True
                for line in docs[section]['vars'][var]['desc'].split('\n'):
                    if first:
                        first = False
                        print_line(
                            re.sub('\*', '\\*', var),
                            re.sub('\*', '\\*', line),
                            re.sub('\*', '\\*', docs[section]['vars'][var]['val']),
                        )
                    else:
                        print_line('', re.sub('\*', '\\*', line), '')
            out_file.write('+-' + '-' * max_var + '-+-' + '-' * max_desc + '-+-' + '-' * max_val + '-+\n')
        out_file.write('\n')
    out_file.write(foot)
    out_file.close()

gen_param_table()
